Traceback (most recent call last):
  File "C:\Users\ahmad\AppData\Local\Programs\Python\Python310\lib\site-packages\jupyter_cache\executors\utils.py", line 58, in single_nb_execution
    executenb(
  File "C:\Users\ahmad\AppData\Local\Programs\Python\Python310\lib\site-packages\nbclient\client.py", line 1314, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "C:\Users\ahmad\AppData\Local\Programs\Python\Python310\lib\site-packages\jupyter_core\utils\__init__.py", line 165, in wrapped
    return loop.run_until_complete(inner)
  File "C:\Users\ahmad\AppData\Local\Programs\Python\Python310\lib\asyncio\base_events.py", line 646, in run_until_complete
    return future.result()
  File "C:\Users\ahmad\AppData\Local\Programs\Python\Python310\lib\site-packages\nbclient\client.py", line 709, in async_execute
    await self.async_execute_cell(
  File "C:\Users\ahmad\AppData\Local\Programs\Python\Python310\lib\site-packages\nbclient\client.py", line 1062, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "C:\Users\ahmad\AppData\Local\Programs\Python\Python310\lib\site-packages\nbclient\client.py", line 918, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
from sklearn.model_selection import train_test_split, cross_val_score
from sklearn.linear_model import LogisticRegression
from sklearn.neighbors import KNeighborsClassifier
from sklearn.naive_bayes import GaussianNB 
from sklearn.ensemble import RandomForestClassifier
from mlxtend.classifier import StackingClassifier
from sklearn.metrics import accuracy_score
import pandas as pd
import warnings

warnings.simplefilter('ignore')


clf1 = KNeighborsClassifier(n_neighbors=5, weights= 'distance')
clf2 = RandomForestClassifier(random_state=10)
clf3 = GaussianNB()
lr = LogisticRegression()
sclf = StackingClassifier(classifiers=[clf1, clf2, clf3], meta_classifier=lr, use_probas=True, average_probas=False)

print('3-fold cross validation:\n')

# Melakukan cross-validation untuk setiap classifier dan stacking classifier
for clf, label in zip([clf1, clf2, clf3, sclf], 
                      ['KNN', 
                       'Random Forest', 
                       'Naive Bayes',
                       'StackingClassifier']):

    try:
        scores = cross_val_score(clf, X_train, y_train, cv=3, scoring='accuracy', error_score='raise')
        print("Accuracy: %0.2f (+/- %0.2f) [%s]" 
              % (scores.mean(), scores.std(), label))
    except ValueError as e:
        print(f"Error for {label}: {e}")

# Melatih StackingClassifier pada data training
try:
    sclf.fit(X_train, y_train)
    # Membuat prediksi pada data test
    y_pred = sclf.predict(X_test)
    # Menghitung akurasi pada set test
    accuracy = accuracy_score(y_test, y_pred)
    print(f'Accuracy of StackingClassifier on test set: {accuracy}')
except ValueError as e:
    print(f"Error during fitting or predicting with StackingClassifier: {e}")

------------------

----- stdout -----
3-fold cross validation:

Accuracy: 0.71 (+/- 0.04) [KNN]
----- stdout -----
Accuracy: 0.77 (+/- 0.02) [Random Forest]
Accuracy: 0.60 (+/- 0.02) [Naive Bayes]
------------------

[1;31m---------------------------------------------------------------------------[0m
[1;31mAttributeError[0m                            Traceback (most recent call last)
Cell [1;32mIn[61], line 30[0m
[0;32m     23[0m [38;5;28;01mfor[39;00m clf, label [38;5;129;01min[39;00m [38;5;28mzip[39m([clf1, clf2, clf3, sclf], 
[0;32m     24[0m                       [[38;5;124m'[39m[38;5;124mKNN[39m[38;5;124m'[39m, 
[0;32m     25[0m                        [38;5;124m'[39m[38;5;124mRandom Forest[39m[38;5;124m'[39m, 
[0;32m     26[0m                        [38;5;124m'[39m[38;5;124mNaive Bayes[39m[38;5;124m'[39m,
[0;32m     27[0m                        [38;5;124m'[39m[38;5;124mStackingClassifier[39m[38;5;124m'[39m]):
[0;32m     29[0m     [38;5;28;01mtry[39;00m:
[1;32m---> 30[0m         scores [38;5;241m=[39m [43mcross_val_score[49m[43m([49m[43mclf[49m[43m,[49m[43m [49m[43mX_train[49m[43m,[49m[43m [49m[43my_train[49m[43m,[49m[43m [49m[43mcv[49m[38;5;241;43m=[39;49m[38;5;241;43m3[39;49m[43m,[49m[43m [49m[43mscoring[49m[38;5;241;43m=[39;49m[38;5;124;43m'[39;49m[38;5;124;43maccuracy[39;49m[38;5;124;43m'[39;49m[43m,[49m[43m [49m[43merror_score[49m[38;5;241;43m=[39;49m[38;5;124;43m'[39;49m[38;5;124;43mraise[39;49m[38;5;124;43m'[39;49m[43m)[49m
[0;32m     31[0m         [38;5;28mprint[39m([38;5;124m"[39m[38;5;124mAccuracy: [39m[38;5;132;01m%0.2f[39;00m[38;5;124m (+/- [39m[38;5;132;01m%0.2f[39;00m[38;5;124m) [[39m[38;5;132;01m%s[39;00m[38;5;124m][39m[38;5;124m"[39m 
[0;32m     32[0m               [38;5;241m%[39m (scores[38;5;241m.[39mmean(), scores[38;5;241m.[39mstd(), label))
[0;32m     33[0m     [38;5;28;01mexcept[39;00m [38;5;167;01mValueError[39;00m [38;5;28;01mas[39;00m e:

File [1;32m~\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\utils\_param_validation.py:213[0m, in [0;36mvalidate_params.<locals>.decorator.<locals>.wrapper[1;34m(*args, **kwargs)[0m
[0;32m    207[0m [38;5;28;01mtry[39;00m:
[0;32m    208[0m     [38;5;28;01mwith[39;00m config_context(
[0;32m    209[0m         skip_parameter_validation[38;5;241m=[39m(
[0;32m    210[0m             prefer_skip_nested_validation [38;5;129;01mor[39;00m global_skip_validation
[0;32m    211[0m         )
[0;32m    212[0m     ):
[1;32m--> 213[0m         [38;5;28;01mreturn[39;00m func([38;5;241m*[39margs, [38;5;241m*[39m[38;5;241m*[39mkwargs)
[0;32m    214[0m [38;5;28;01mexcept[39;00m InvalidParameterError [38;5;28;01mas[39;00m e:
[0;32m    215[0m     [38;5;66;03m# When the function is just a wrapper around an estimator, we allow[39;00m
[0;32m    216[0m     [38;5;66;03m# the function to delegate validation to the estimator, but we replace[39;00m
[0;32m    217[0m     [38;5;66;03m# the name of the estimator by the name of the function in the error[39;00m
[0;32m    218[0m     [38;5;66;03m# message to avoid confusion.[39;00m
[0;32m    219[0m     msg [38;5;241m=[39m re[38;5;241m.[39msub(
[0;32m    220[0m         [38;5;124mr[39m[38;5;124m"[39m[38;5;124mparameter of [39m[38;5;124m\[39m[38;5;124mw+ must be[39m[38;5;124m"[39m,
[0;32m    221[0m         [38;5;124mf[39m[38;5;124m"[39m[38;5;124mparameter of [39m[38;5;132;01m{[39;00mfunc[38;5;241m.[39m[38;5;18m__qualname__[39m[38;5;132;01m}[39;00m[38;5;124m must be[39m[38;5;124m"[39m,
[0;32m    222[0m         [38;5;28mstr[39m(e),
[0;32m    223[0m     )

File [1;32m~\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\model_selection\_validation.py:719[0m, in [0;36mcross_val_score[1;34m(estimator, X, y, groups, scoring, cv, n_jobs, verbose, fit_params, params, pre_dispatch, error_score)[0m
[0;32m    716[0m [38;5;66;03m# To ensure multimetric format is not supported[39;00m
[0;32m    717[0m scorer [38;5;241m=[39m check_scoring(estimator, scoring[38;5;241m=[39mscoring)
[1;32m--> 719[0m cv_results [38;5;241m=[39m [43mcross_validate[49m[43m([49m
[0;32m    720[0m [43m    [49m[43mestimator[49m[38;5;241;43m=[39;49m[43mestimator[49m[43m,[49m
[0;32m    721[0m [43m    [49m[43mX[49m[38;5;241;43m=[39;49m[43mX[49m[43m,[49m
[0;32m    722[0m [43m    [49m[43my[49m[38;5;241;43m=[39;49m[43my[49m[43m,[49m
[0;32m    723[0m [43m    [49m[43mgroups[49m[38;5;241;43m=[39;49m[43mgroups[49m[43m,[49m
[0;32m    724[0m [43m    [49m[43mscoring[49m[38;5;241;43m=[39;49m[43m{[49m[38;5;124;43m"[39;49m[38;5;124;43mscore[39;49m[38;5;124;43m"[39;49m[43m:[49m[43m [49m[43mscorer[49m[43m}[49m[43m,[49m
[0;32m    725[0m [43m    [49m[43mcv[49m[38;5;241;43m=[39;49m[43mcv[49m[43m,[49m
[0;32m    726[0m [43m    [49m[43mn_jobs[49m[38;5;241;43m=[39;49m[43mn_jobs[49m[43m,[49m
[0;32m    727[0m [43m    [49m[43mverbose[49m[38;5;241;43m=[39;49m[43mverbose[49m[43m,[49m
[0;32m    728[0m [43m    [49m[43mfit_params[49m[38;5;241;43m=[39;49m[43mfit_params[49m[43m,[49m
[0;32m    729[0m [43m    [49m[43mparams[49m[38;5;241;43m=[39;49m[43mparams[49m[43m,[49m
[0;32m    730[0m [43m    [49m[43mpre_dispatch[49m[38;5;241;43m=[39;49m[43mpre_dispatch[49m[43m,[49m
[0;32m    731[0m [43m    [49m[43merror_score[49m[38;5;241;43m=[39;49m[43merror_score[49m[43m,[49m
[0;32m    732[0m [43m[49m[43m)[49m
[0;32m    733[0m [38;5;28;01mreturn[39;00m cv_results[[38;5;124m"[39m[38;5;124mtest_score[39m[38;5;124m"[39m]

File [1;32m~\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\utils\_param_validation.py:213[0m, in [0;36mvalidate_params.<locals>.decorator.<locals>.wrapper[1;34m(*args, **kwargs)[0m
[0;32m    207[0m [38;5;28;01mtry[39;00m:
[0;32m    208[0m     [38;5;28;01mwith[39;00m config_context(
[0;32m    209[0m         skip_parameter_validation[38;5;241m=[39m(
[0;32m    210[0m             prefer_skip_nested_validation [38;5;129;01mor[39;00m global_skip_validation
[0;32m    211[0m         )
[0;32m    212[0m     ):
[1;32m--> 213[0m         [38;5;28;01mreturn[39;00m func([38;5;241m*[39margs, [38;5;241m*[39m[38;5;241m*[39mkwargs)
[0;32m    214[0m [38;5;28;01mexcept[39;00m InvalidParameterError [38;5;28;01mas[39;00m e:
[0;32m    215[0m     [38;5;66;03m# When the function is just a wrapper around an estimator, we allow[39;00m
[0;32m    216[0m     [38;5;66;03m# the function to delegate validation to the estimator, but we replace[39;00m
[0;32m    217[0m     [38;5;66;03m# the name of the estimator by the name of the function in the error[39;00m
[0;32m    218[0m     [38;5;66;03m# message to avoid confusion.[39;00m
[0;32m    219[0m     msg [38;5;241m=[39m re[38;5;241m.[39msub(
[0;32m    220[0m         [38;5;124mr[39m[38;5;124m"[39m[38;5;124mparameter of [39m[38;5;124m\[39m[38;5;124mw+ must be[39m[38;5;124m"[39m,
[0;32m    221[0m         [38;5;124mf[39m[38;5;124m"[39m[38;5;124mparameter of [39m[38;5;132;01m{[39;00mfunc[38;5;241m.[39m[38;5;18m__qualname__[39m[38;5;132;01m}[39;00m[38;5;124m must be[39m[38;5;124m"[39m,
[0;32m    222[0m         [38;5;28mstr[39m(e),
[0;32m    223[0m     )

File [1;32m~\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\model_selection\_validation.py:430[0m, in [0;36mcross_validate[1;34m(estimator, X, y, groups, scoring, cv, n_jobs, verbose, fit_params, params, pre_dispatch, return_train_score, return_estimator, return_indices, error_score)[0m
[0;32m    427[0m [38;5;66;03m# We clone the estimator to make sure that all the folds are[39;00m
[0;32m    428[0m [38;5;66;03m# independent, and that it is pickle-able.[39;00m
[0;32m    429[0m parallel [38;5;241m=[39m Parallel(n_jobs[38;5;241m=[39mn_jobs, verbose[38;5;241m=[39mverbose, pre_dispatch[38;5;241m=[39mpre_dispatch)
[1;32m--> 430[0m results [38;5;241m=[39m [43mparallel[49m[43m([49m
[0;32m    431[0m [43m    [49m[43mdelayed[49m[43m([49m[43m_fit_and_score[49m[43m)[49m[43m([49m
[0;32m    432[0m [43m        [49m[43mclone[49m[43m([49m[43mestimator[49m[43m)[49m[43m,[49m
[0;32m    433[0m [43m        [49m[43mX[49m[43m,[49m
[0;32m    434[0m [43m        [49m[43my[49m[43m,[49m
[0;32m    435[0m [43m        [49m[43mscorer[49m[38;5;241;43m=[39;49m[43mscorers[49m[43m,[49m
[0;32m    436[0m [43m        [49m[43mtrain[49m[38;5;241;43m=[39;49m[43mtrain[49m[43m,[49m
[0;32m    437[0m [43m        [49m[43mtest[49m[38;5;241;43m=[39;49m[43mtest[49m[43m,[49m
[0;32m    438[0m [43m        [49m[43mverbose[49m[38;5;241;43m=[39;49m[43mverbose[49m[43m,[49m
[0;32m    439[0m [43m        [49m[43mparameters[49m[38;5;241;43m=[39;49m[38;5;28;43;01mNone[39;49;00m[43m,[49m
[0;32m    440[0m [43m        [49m[43mfit_params[49m[38;5;241;43m=[39;49m[43mrouted_params[49m[38;5;241;43m.[39;49m[43mestimator[49m[38;5;241;43m.[39;49m[43mfit[49m[43m,[49m
[0;32m    441[0m [43m        [49m[43mscore_params[49m[38;5;241;43m=[39;49m[43mrouted_params[49m[38;5;241;43m.[39;49m[43mscorer[49m[38;5;241;43m.[39;49m[43mscore[49m[43m,[49m
[0;32m    442[0m [43m        [49m[43mreturn_train_score[49m[38;5;241;43m=[39;49m[43mreturn_train_score[49m[43m,[49m
[0;32m    443[0m [43m        [49m[43mreturn_times[49m[38;5;241;43m=[39;49m[38;5;28;43;01mTrue[39;49;00m[43m,[49m
[0;32m    444[0m [43m        [49m[43mreturn_estimator[49m[38;5;241;43m=[39;49m[43mreturn_estimator[49m[43m,[49m
[0;32m    445[0m [43m        [49m[43merror_score[49m[38;5;241;43m=[39;49m[43merror_score[49m[43m,[49m
[0;32m    446[0m [43m    [49m[43m)[49m
[0;32m    447[0m [43m    [49m[38;5;28;43;01mfor[39;49;00m[43m [49m[43mtrain[49m[43m,[49m[43m [49m[43mtest[49m[43m [49m[38;5;129;43;01min[39;49;00m[43m [49m[43mindices[49m
[0;32m    448[0m [43m[49m[43m)[49m
[0;32m    450[0m _warn_or_raise_about_fit_failures(results, error_score)
[0;32m    452[0m [38;5;66;03m# For callable scoring, the return type is only know after calling. If the[39;00m
[0;32m    453[0m [38;5;66;03m# return type is a dictionary, the error scores can now be inserted with[39;00m
[0;32m    454[0m [38;5;66;03m# the correct key.[39;00m

File [1;32m~\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\utils\parallel.py:67[0m, in [0;36mParallel.__call__[1;34m(self, iterable)[0m
[0;32m     62[0m config [38;5;241m=[39m get_config()
[0;32m     63[0m iterable_with_config [38;5;241m=[39m (
[0;32m     64[0m     (_with_config(delayed_func, config), args, kwargs)
[0;32m     65[0m     [38;5;28;01mfor[39;00m delayed_func, args, kwargs [38;5;129;01min[39;00m iterable
[0;32m     66[0m )
[1;32m---> 67[0m [38;5;28;01mreturn[39;00m [38;5;28;43msuper[39;49m[43m([49m[43m)[49m[38;5;241;43m.[39;49m[38;5;21;43m__call__[39;49m[43m([49m[43miterable_with_config[49m[43m)[49m

File [1;32m~\AppData\Local\Programs\Python\Python310\lib\site-packages\joblib\parallel.py:1863[0m, in [0;36mParallel.__call__[1;34m(self, iterable)[0m
[0;32m   1861[0m     output [38;5;241m=[39m [38;5;28mself[39m[38;5;241m.[39m_get_sequential_output(iterable)
[0;32m   1862[0m     [38;5;28mnext[39m(output)
[1;32m-> 1863[0m     [38;5;28;01mreturn[39;00m output [38;5;28;01mif[39;00m [38;5;28mself[39m[38;5;241m.[39mreturn_generator [38;5;28;01melse[39;00m [38;5;28;43mlist[39;49m[43m([49m[43moutput[49m[43m)[49m
[0;32m   1865[0m [38;5;66;03m# Let's create an ID that uniquely identifies the current call. If the[39;00m
[0;32m   1866[0m [38;5;66;03m# call is interrupted early and that the same instance is immediately[39;00m
[0;32m   1867[0m [38;5;66;03m# re-used, this id will be used to prevent workers that were[39;00m
[0;32m   1868[0m [38;5;66;03m# concurrently finalizing a task from the previous call to run the[39;00m
[0;32m   1869[0m [38;5;66;03m# callback.[39;00m
[0;32m   1870[0m [38;5;28;01mwith[39;00m [38;5;28mself[39m[38;5;241m.[39m_lock:

File [1;32m~\AppData\Local\Programs\Python\Python310\lib\site-packages\joblib\parallel.py:1792[0m, in [0;36mParallel._get_sequential_output[1;34m(self, iterable)[0m
[0;32m   1790[0m [38;5;28mself[39m[38;5;241m.[39mn_dispatched_batches [38;5;241m+[39m[38;5;241m=[39m [38;5;241m1[39m
[0;32m   1791[0m [38;5;28mself[39m[38;5;241m.[39mn_dispatched_tasks [38;5;241m+[39m[38;5;241m=[39m [38;5;241m1[39m
[1;32m-> 1792[0m res [38;5;241m=[39m func([38;5;241m*[39margs, [38;5;241m*[39m[38;5;241m*[39mkwargs)
[0;32m   1793[0m [38;5;28mself[39m[38;5;241m.[39mn_completed_tasks [38;5;241m+[39m[38;5;241m=[39m [38;5;241m1[39m
[0;32m   1794[0m [38;5;28mself[39m[38;5;241m.[39mprint_progress()

File [1;32m~\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\utils\parallel.py:129[0m, in [0;36m_FuncWrapper.__call__[1;34m(self, *args, **kwargs)[0m
[0;32m    127[0m     config [38;5;241m=[39m {}
[0;32m    128[0m [38;5;28;01mwith[39;00m config_context([38;5;241m*[39m[38;5;241m*[39mconfig):
[1;32m--> 129[0m     [38;5;28;01mreturn[39;00m [38;5;28mself[39m[38;5;241m.[39mfunction([38;5;241m*[39margs, [38;5;241m*[39m[38;5;241m*[39mkwargs)

File [1;32m~\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\model_selection\_validation.py:917[0m, in [0;36m_fit_and_score[1;34m(estimator, X, y, scorer, train, test, verbose, parameters, fit_params, score_params, return_train_score, return_parameters, return_n_test_samples, return_times, return_estimator, split_progress, candidate_progress, error_score)[0m
[0;32m    914[0m result[[38;5;124m"[39m[38;5;124mfit_error[39m[38;5;124m"[39m] [38;5;241m=[39m [38;5;28;01mNone[39;00m
[0;32m    916[0m fit_time [38;5;241m=[39m time[38;5;241m.[39mtime() [38;5;241m-[39m start_time
[1;32m--> 917[0m test_scores [38;5;241m=[39m [43m_score[49m[43m([49m
[0;32m    918[0m [43m    [49m[43mestimator[49m[43m,[49m[43m [49m[43mX_test[49m[43m,[49m[43m [49m[43my_test[49m[43m,[49m[43m [49m[43mscorer[49m[43m,[49m[43m [49m[43mscore_params_test[49m[43m,[49m[43m [49m[43merror_score[49m
[0;32m    919[0m [43m[49m[43m)[49m
[0;32m    920[0m score_time [38;5;241m=[39m time[38;5;241m.[39mtime() [38;5;241m-[39m start_time [38;5;241m-[39m fit_time
[0;32m    921[0m [38;5;28;01mif[39;00m return_train_score:

File [1;32m~\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\model_selection\_validation.py:982[0m, in [0;36m_score[1;34m(estimator, X_test, y_test, scorer, score_params, error_score)[0m
[0;32m    980[0m         scores [38;5;241m=[39m scorer(estimator, X_test, [38;5;241m*[39m[38;5;241m*[39mscore_params)
[0;32m    981[0m     [38;5;28;01melse[39;00m:
[1;32m--> 982[0m         scores [38;5;241m=[39m scorer(estimator, X_test, y_test, [38;5;241m*[39m[38;5;241m*[39mscore_params)
[0;32m    983[0m [38;5;28;01mexcept[39;00m [38;5;167;01mException[39;00m:
[0;32m    984[0m     [38;5;28;01mif[39;00m [38;5;28misinstance[39m(scorer, _MultimetricScorer):
[0;32m    985[0m         [38;5;66;03m# If `_MultimetricScorer` raises exception, the `error_score`[39;00m
[0;32m    986[0m         [38;5;66;03m# parameter is equal to "raise".[39;00m

File [1;32m~\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_scorer.py:145[0m, in [0;36m_MultimetricScorer.__call__[1;34m(self, estimator, *args, **kwargs)[0m
[0;32m    143[0m [38;5;28;01mexcept[39;00m [38;5;167;01mException[39;00m [38;5;28;01mas[39;00m e:
[0;32m    144[0m     [38;5;28;01mif[39;00m [38;5;28mself[39m[38;5;241m.[39m_raise_exc:
[1;32m--> 145[0m         [38;5;28;01mraise[39;00m e
[0;32m    146[0m     [38;5;28;01melse[39;00m:
[0;32m    147[0m         scores[name] [38;5;241m=[39m format_exc()

File [1;32m~\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_scorer.py:137[0m, in [0;36m_MultimetricScorer.__call__[1;34m(self, estimator, *args, **kwargs)[0m
[0;32m    135[0m [38;5;28;01mtry[39;00m:
[0;32m    136[0m     [38;5;28;01mif[39;00m [38;5;28misinstance[39m(scorer, _BaseScorer):
[1;32m--> 137[0m         score [38;5;241m=[39m scorer[38;5;241m.[39m_score(
[0;32m    138[0m             cached_call, estimator, [38;5;241m*[39margs, [38;5;241m*[39m[38;5;241m*[39mrouted_params[38;5;241m.[39mget(name)[38;5;241m.[39mscore
[0;32m    139[0m         )
[0;32m    140[0m     [38;5;28;01melse[39;00m:
[0;32m    141[0m         score [38;5;241m=[39m scorer(estimator, [38;5;241m*[39margs, [38;5;241m*[39m[38;5;241m*[39mrouted_params[38;5;241m.[39mget(name)[38;5;241m.[39mscore)

File [1;32m~\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_scorer.py:345[0m, in [0;36m_Scorer._score[1;34m(self, method_caller, estimator, X, y_true, **kwargs)[0m
[0;32m    343[0m pos_label [38;5;241m=[39m [38;5;28;01mNone[39;00m [38;5;28;01mif[39;00m is_regressor(estimator) [38;5;28;01melse[39;00m [38;5;28mself[39m[38;5;241m.[39m_get_pos_label()
[0;32m    344[0m response_method [38;5;241m=[39m _check_response_method(estimator, [38;5;28mself[39m[38;5;241m.[39m_response_method)
[1;32m--> 345[0m y_pred [38;5;241m=[39m [43mmethod_caller[49m[43m([49m
[0;32m    346[0m [43m    [49m[43mestimator[49m[43m,[49m[43m [49m[43mresponse_method[49m[38;5;241;43m.[39;49m[38;5;18;43m__name__[39;49m[43m,[49m[43m [49m[43mX[49m[43m,[49m[43m [49m[43mpos_label[49m[38;5;241;43m=[39;49m[43mpos_label[49m
[0;32m    347[0m [43m[49m[43m)[49m
[0;32m    349[0m scoring_kwargs [38;5;241m=[39m {[38;5;241m*[39m[38;5;241m*[39m[38;5;28mself[39m[38;5;241m.[39m_kwargs, [38;5;241m*[39m[38;5;241m*[39mkwargs}
[0;32m    350[0m [38;5;28;01mreturn[39;00m [38;5;28mself[39m[38;5;241m.[39m_sign [38;5;241m*[39m [38;5;28mself[39m[38;5;241m.[39m_score_func(y_true, y_pred, [38;5;241m*[39m[38;5;241m*[39mscoring_kwargs)

File [1;32m~\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_scorer.py:87[0m, in [0;36m_cached_call[1;34m(cache, estimator, response_method, *args, **kwargs)[0m
[0;32m     84[0m [38;5;28;01mif[39;00m cache [38;5;129;01mis[39;00m [38;5;129;01mnot[39;00m [38;5;28;01mNone[39;00m [38;5;129;01mand[39;00m response_method [38;5;129;01min[39;00m cache:
[0;32m     85[0m     [38;5;28;01mreturn[39;00m cache[response_method]
[1;32m---> 87[0m result, _ [38;5;241m=[39m _get_response_values(
[0;32m     88[0m     estimator, [38;5;241m*[39margs, response_method[38;5;241m=[39mresponse_method, [38;5;241m*[39m[38;5;241m*[39mkwargs
[0;32m     89[0m )
[0;32m     91[0m [38;5;28;01mif[39;00m cache [38;5;129;01mis[39;00m [38;5;129;01mnot[39;00m [38;5;28;01mNone[39;00m:
[0;32m     92[0m     cache[response_method] [38;5;241m=[39m result

File [1;32m~\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\utils\_response.py:198[0m, in [0;36m_get_response_values[1;34m(estimator, X, response_method, pos_label, return_response_method_used)[0m
[0;32m    196[0m [38;5;28;01mif[39;00m is_classifier(estimator):
[0;32m    197[0m     prediction_method [38;5;241m=[39m _check_response_method(estimator, response_method)
[1;32m--> 198[0m     classes [38;5;241m=[39m [43mestimator[49m[38;5;241;43m.[39;49m[43mclasses_[49m
[0;32m    199[0m     target_type [38;5;241m=[39m type_of_target(classes)
[0;32m    201[0m     [38;5;28;01mif[39;00m target_type [38;5;129;01min[39;00m ([38;5;124m"[39m[38;5;124mbinary[39m[38;5;124m"[39m, [38;5;124m"[39m[38;5;124mmulticlass[39m[38;5;124m"[39m):

[1;31mAttributeError[0m: 'StackingClassifier' object has no attribute 'classes_'

